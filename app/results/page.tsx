'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';

interface Result {
  id: number;
  contestId: number;
  contestTitle: string;
  participantId: number;
  participantName: string;
  score: number;
  place: number;
  submissionDate: string;
  category: string;
  feedback?: string;
}

export default function Results() {
  const [results, setResults] = useState<Result[]>([]);
  const [loading, setLoading] = useState(true);
  const [category, setCategory] = useState('all');
  const [sortBy, setSortBy] = useState('date');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    const fetchResults = async () => {
      try {
        // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API-–∑–∞–ø—Ä–æ—Å
        const mockResults: Result[] = [
          {
            id: 1,
            contestId: 1,
            contestTitle: '–ö–æ–Ω–∫—É—Ä—Å –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞ "–õ—É—á—à–∏–π —Å–∞–π—Ç"',
            participantId: 1,
            participantName: '–í–∏–∫—Ç–æ—Ä–∏—è –®—Ç–∏–ª—å',
            score: 95,
            place: 1,
            submissionDate: '2024-03-15',
            category: '–í–µ–±-–¥–∏–∑–∞–π–Ω',
            feedback: '–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∞'
          },
          {
            id: 2,
            contestId: 1,
            contestTitle: '–ö–æ–Ω–∫—É—Ä—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ "–ü—Ä–∏—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏"',
            participantId: 2,
            participantName: '–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤',
            score: 92,
            place: 2,
            submissionDate: '2024-03-14',
            category: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
            feedback: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∫—É—Ä—Å, —Ö–æ—Ä–æ—à–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è'
          },
          {
            id: 3,
            contestId: 2,
            contestTitle: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å "–í–µ—Å–µ–Ω–Ω–∏–µ –º–æ—Ç–∏–≤—ã"',
            participantId: 3,
            participantName: '–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
            score: 98,
            place: 1,
            submissionDate: '2024-03-10',
            category: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            feedback: '–ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–µ–º—É, —è—Ä–∫–∏–µ –æ–±—Ä–∞–∑—ã'
          }
        ];
        setResults(mockResults);
      } catch (error) {
        console.error('Error fetching results:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const filteredResults = results.filter(result => {
    const matchesSearch = result.contestTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         result.participantName.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = category === 'all' || result.category === category;
    return matchesSearch && matchesCategory;
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const sortedResults = [...filteredResults].sort((a, b) => {
    switch (sortBy) {
      case 'date':
        return new Date(b.submissionDate).getTime() - new Date(a.submissionDate).getTime();
      case 'score':
        return b.score - a.score;
      case 'place':
        return a.place - b.place;
      default:
        return 0;
    }
  });

  return (
    <div className="container py-4">
      <h2 className="mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤</h2>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="card shadow-sm mb-4">
        <div className="card-body">
          <div className="row g-3">
            <div className="col-md-4">
              <input
                type="text"
                className="form-control"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="col-md-4">
              <select
                className="form-select"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              >
                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                <option value="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è</option>
                <option value="–†–∏—Å—É–Ω–æ–∫">–†–∏—Å—É–Ω–æ–∫</option>
                <option value="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞">–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞</option>
                <option value="–ú—É–∑—ã–∫–∞">–ú—É–∑—ã–∫–∞</option>
              </select>
            </div>
            <div className="col-md-4">
              <select
                className="form-select"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="date">–ü–æ –¥–∞—Ç–µ</option>
                <option value="score">–ü–æ –±–∞–ª–ª–∞–º</option>
                <option value="place">–ü–æ –º–µ—Å—Ç—É</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {loading ? (
        <div className="text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      ) : sortedResults.length > 0 ? (
        <div className="card shadow-sm">
          <div className="card-body">
            <div className="table-responsive">
              <table className="table table-hover">
                <thead>
                  <tr>
                    <th>–ú–µ—Å—Ç–æ</th>
                    <th>–ö–æ–Ω–∫—É—Ä—Å</th>
                    <th>–£—á–∞—Å—Ç–Ω–∏–∫</th>
                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th>–ë–∞–ª–ª—ã</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {sortedResults.map(result => (
                    <tr key={result.id}>
                      <td>
                        <span className="fs-5">
                          {result.place === 1 ? 'ü•á' : result.place === 2 ? 'ü•à' : result.place === 3 ? 'ü•â' : result.place}
                        </span>
                      </td>
                      <td>
                        <Link
                          href={`/contests/${result.contestId}`}
                          className="text-decoration-none text-body"
                        >
                          {result.contestTitle}
                        </Link>
                      </td>
                      <td>
                        <Link
                          href={`/profile/${result.participantId}`}
                          className="text-decoration-none text-body"
                        >
                          {result.participantName}
                        </Link>
                      </td>
                      <td>
                        <span className="badge bg-secondary">
                          {result.category}
                        </span>
                      </td>
                      <td>
                        <span className="badge bg-primary">
                          {result.score}
                        </span>
                      </td>
                      <td>{new Date(result.submissionDate).toLocaleDateString()}</td>
                      <td>
                        <button
                          className="btn btn-sm btn-outline-primary"
                          data-bs-toggle="tooltip"
                          data-bs-placement="top"
                          title={result.feedback}
                        >
                          –û—Ç–∑—ã–≤
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center py-5">
          <p className="text-body-secondary mb-0">
            –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </p>
        </div>
      )}
    </div>
  );
} 